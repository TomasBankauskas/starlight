"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// stackbit.config.ts
var stackbit_config_exports = {};
__export(stackbit_config_exports, {
  default: () => stackbit_config_default
});
module.exports = __toCommonJS(stackbit_config_exports);
var import_types14 = require("@stackbit/types");
var import_cms_git = require("@stackbit/cms-git");

// .stackbit/models/banner.ts
var import_types = require("@stackbit/types");
var banner = {
  type: "object",
  name: "banner",
  label: "Banner",
  labelField: "content",
  fields: [
    { name: "content", type: "text" }
  ]
};

// .stackbit/models/buttonLink.ts
var import_types2 = require("@stackbit/types");
var buttonLink = {
  type: "object",
  name: "buttonLink",
  label: "Button",
  labelField: "text",
  fields: [
    { name: "text", type: "string", default: "Get Started" },
    { name: "link", type: "string", default: "/" },
    {
      name: "variant",
      type: "enum",
      controlType: "button-group",
      options: [
        { label: "Primary", value: "primary" },
        { label: "Secondary", value: "secondary" },
        { label: "Minimal", value: "minimal" }
      ],
      default: "primary"
    },
    { name: "icon", type: "string" }
  ]
};

// .stackbit/models/hero.ts
var import_types3 = require("@stackbit/types");
var hero = {
  type: "object",
  name: "hero",
  label: "Hero",
  labelField: "title",
  fields: [
    { name: "title", type: "string" },
    { name: "tagline", type: "string" },
    { name: "image", type: "model", models: ["image", "imageLightDark", "imageHtml"] },
    { name: "actions", type: "list", items: { type: "model", models: ["buttonLink"] } }
  ]
};

// .stackbit/models/image.ts
var import_types4 = require("@stackbit/types");
var image = {
  type: "object",
  name: "image",
  label: "Image",
  labelField: "alt",
  fields: [
    { name: "alt", type: "string" },
    { name: "file", type: "image" }
  ]
};

// .stackbit/models/imageHtml.ts
var import_types5 = require("@stackbit/types");
var imageHtml = {
  type: "object",
  name: "imageHtml",
  label: "HTML Image",
  labelField: "alt",
  fields: [
    { name: "alt", type: "string" },
    { name: "file", type: "string" }
  ]
};

// .stackbit/models/imageLightDark.ts
var import_types6 = require("@stackbit/types");
var imageLightDark = {
  type: "object",
  name: "imageLightDark",
  label: "Light/Dark Image",
  labelField: "alt",
  fields: [
    { name: "alt", type: "string" },
    { name: "dark", type: "image" },
    { name: "light", type: "image" }
  ]
};

// .stackbit/models/page.ts
var import_types7 = require("@stackbit/types");
var page = {
  name: "page",
  type: "page",
  urlPath: "/{slug}",
  filePath: "src/content/docs/{slug}.md",
  fieldGroups: [{ name: "settings", label: "Settings", icon: "gear" }],
  fields: [
    { name: "title", type: "string", required: true },
    { name: "description", type: "string" },
    { name: "hero", type: "model", models: ["hero"] },
    { name: "banner", type: "model", models: ["banner"] },
    { name: "lastUpdated", type: "date" },
    {
      name: "template",
      type: "enum",
      controlType: "button-group",
      options: ["doc", "splash"],
      group: "settings"
    },
    { name: "pagefind", type: "boolean", group: "settings" },
    { name: "draft", type: "boolean", group: "settings" }
  ]
};

// .stackbit/models/sidebarAutoLinkGroup.ts
var import_types8 = require("@stackbit/types");
var sidebarAutoLinkGroup = {
  type: "object",
  name: "sidebarAutoLinkGroup",
  label: "Autogenerated Group of Links",
  labelField: "label",
  fields: [
    { name: "label", type: "string" },
    {
      name: "autogenerate",
      type: "model",
      models: ["sidebarAutoLinks"]
    },
    { name: "collapsed", type: "boolean" }
  ]
};

// .stackbit/models/sidebarAutoLinks.ts
var import_types9 = require("@stackbit/types");
var sidebarAutoLinks = {
  type: "object",
  name: "sidebarAutoLinks",
  label: "Autogenerated Links",
  labelField: "directory",
  fields: [
    { name: "directory", type: "string" },
    { name: "collapsed", type: "boolean" }
  ]
};

// .stackbit/models/sidebarConfig.ts
var import_types10 = require("@stackbit/types");
var sidebarConfig = {
  type: "data",
  name: "sidebarConfig",
  label: "Sidebar Configuration",
  singleInstance: true,
  readOnly: true,
  filePath: "src/data/sidebarConfig.json",
  fields: [
    {
      type: "list",
      name: "items",
      label: "Sidebar items",
      items: {
        type: "model",
        models: ["sidebarLink", "sidebarInternalLink", "sidebarLinkGroup", "sidebarAutoLinkGroup"]
      }
    }
  ]
};

// .stackbit/models/sidebarInternalLink.ts
var import_types11 = require("@stackbit/types");
var sidebarInternalLink = {
  type: "object",
  name: "sidebarInternalLink",
  label: "Internal Link",
  labelField: "label",
  fields: [
    { name: "label", type: "string" },
    { name: "slug", type: "string" }
  ]
};

// .stackbit/models/sidebarLink.ts
var import_types12 = require("@stackbit/types");
var sidebarLink = {
  type: "object",
  name: "sidebarLink",
  label: "Link",
  labelField: "label",
  fields: [
    { name: "label", type: "string" },
    { name: "link", type: "string" }
  ]
};

// .stackbit/models/sidebarLinkGroup.ts
var import_types13 = require("@stackbit/types");
var sidebarLinkGroup = {
  type: "object",
  name: "sidebarLinkGroup",
  label: "Group of Links",
  labelField: "label",
  fields: [
    { name: "label", type: "string" },
    {
      type: "list",
      name: "items",
      label: "Items",
      items: {
        type: "model",
        models: ["sidebarLink", "sidebarInternalLink", "sidebarLinkGroup", "sidebarAutoLinkGroup"]
      }
    },
    { name: "collapsed", type: "boolean" }
  ]
};

// stackbit.config.ts
var stackbit_config_default = (0, import_types14.defineStackbitConfig)({
  stackbitVersion: "~0.6.0",
  ssgName: "custom",
  nodeVersion: "18",
  devCommand: "node_modules/.bin/astro dev --port {PORT} --hostname 127.0.0.1",
  experimental: {
    ssg: {
      name: "Astro",
      logPatterns: {
        up: ["is ready", "astro"]
      },
      directRoutes: {
        "socket.io": "socket.io"
      },
      passthrough: ["/vite-hmr/**"]
    }
  },
  contentSources: [
    new import_cms_git.GitContentSource({
      rootPath: "/Users/tomasbankauskas/Desktop/starlight/examples/visual-editing",
      contentDirs: ["src/content/docs", "src/data"],
      models: [
        banner,
        buttonLink,
        hero,
        image,
        imageHtml,
        imageLightDark,
        page,
        sidebarAutoLinkGroup,
        sidebarAutoLinks,
        sidebarConfig,
        sidebarInternalLink,
        sidebarLink,
        sidebarLinkGroup
      ],
      assetsConfig: {
        referenceType: "static",
        staticDir: "/src/assets",
        publicPath: "/"
      }
    })
  ]
});
//# sourceMappingURL=stackbit.config.ZL6JN52E.cjs.map
